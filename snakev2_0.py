import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏ –±–∞–∑–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
GRID_SIZE = 10
SPEED = 0.3  # –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–º–µ–π–∫–∏

# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏
directions = {
    "‚¨Ü": (-1, 0),
    "‚¨á": (1, 0),
    "‚¨Ö": (0, -1),
    "‚û°": (0, 1)
}

game_data = {}

async def start_game(chat_id, difficulty=1):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã —Å —É—á—ë—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    global SPEED
    if difficulty == 1:
        SPEED = 0.3
    elif difficulty == 2:
        SPEED = 0.2
    elif difficulty == 3:
        SPEED = 0.1

    snake = [(GRID_SIZE // 2, GRID_SIZE // 2)]
    food = (random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1))
    direction = "‚¨Ü"
    score = 0  # –û—á–∫–∏
    game_data[chat_id] = {"snake": snake, "food": food, "direction": direction, "score": score, "difficulty": difficulty}
    await update_game_message(chat_id)

async def update_game_message(chat_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∫–æ–≤."""
    data = game_data[chat_id]
    snake = data["snake"]
    food = data["food"]
    direction = data["direction"]
    score = data["score"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    grid = [["‚¨ú" for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]
    for x, y in snake:
        grid[x][y] = "üü©"
    grid[food[0]][food[1]] = "üçé"

    field = "\n".join("".join(row) for row in grid)
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("‚¨Ü", callback_data="move_‚¨Ü"),
        InlineKeyboardButton("‚¨á", callback_data="move_‚¨á"),
        InlineKeyboardButton("‚¨Ö", callback_data="move_‚¨Ö"),
        InlineKeyboardButton("‚û°", callback_data="move_‚û°")
    )
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—á–∫–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    await bot.send_message(chat_id, f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {data['difficulty']}\n–û—á–∫–∏: {score}\n\n{field}", reply_markup=keyboard)

@router.message(Command("start"))
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∑–º–µ–π–∫–∞ –≤ Telegram. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å: 1 - –õ–µ–≥–∫–æ, 2 - –°—Ä–µ–¥–Ω–µ, 3 - –°–ª–æ–∂–Ω–æ.")
    
    # –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É —Å –ª–µ–≥–∫–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    await start_game(message.chat.id, difficulty=1)

@router.callback_query(lambda c: c.data.startswith("move_"))
async def move_snake(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏"""
    chat_id = callback_query.message.chat.id
    if chat_id not in game_data:
        await start_game(chat_id)
        return
    
    new_direction = callback_query.data.split("_")[1]
    data = game_data[chat_id]
    current_direction = data["direction"]

    # –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    if (new_direction == "‚¨Ü" and current_direction == "‚¨á") or \
       (new_direction == "‚¨á" and current_direction == "‚¨Ü") or \
       (new_direction == "‚¨Ö" and current_direction == "‚û°") or \
       (new_direction == "‚û°" and current_direction == "‚¨Ö"):
        return
    
    data["direction"] = new_direction
    await move_snake_logic(chat_id)
    await update_game_message(chat_id)

async def move_snake_logic(chat_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–º–µ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è"""
    data = game_data[chat_id]
    snake = data["snake"]
    direction = data["direction"]
    food = data["food"]
    score = data["score"]
    
    head_x, head_y = snake[-1]
    move_x, move_y = directions[direction]
    new_head = (head_x + move_x, head_y + move_y)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏ –∏–ª–∏ —Å–æ–±–æ–π
    if new_head in snake or not (0 <= new_head[0] < GRID_SIZE and 0 <= new_head[1] < GRID_SIZE):
        await bot.send_message(chat_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! /start –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
        del game_data[chat_id]
        return
    
    snake.append(new_head)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—ä–µ–ª–∞ –ª–∏ –∑–º–µ–π–∫–∞ –µ–¥—É
    if new_head == food:
        data["food"] = (random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1))  # –ù–æ–≤–∞—è –µ–¥–∞
        data["score"] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—á–∫–∏
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø–æ –º–µ—Ä–µ —Ä–æ—Å—Ç–∞ –æ—á–∫–æ–≤
        if data["score"] % 5 == 0:
            data["difficulty"] += 1
            await start_game(chat_id, difficulty=data["difficulty"])
    else:
        snake.pop(0)  # –£–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç, –µ—Å–ª–∏ –Ω–µ —Å—ä–µ–¥–µ–Ω–∞ –µ–¥–∞

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
