import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

TOKEN = ""  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

# –†–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
GRID_SIZE = 10
SPEED = 0.3  # –ë–∞–∑–æ–≤–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –∑–º–µ–π–∫–∏

# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏
directions = {
    "‚¨Ü": (-1, 0),
    "‚¨á": (1, 0),
    "‚¨Ö": (0, -1),
    "‚û°": (0, 1)
}

game_data = {}

async def start_game(chat_id, difficulty=1):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã —Å —É—á—ë—Ç–æ–º —Å–ª–æ–∂–Ω–æ—Å—Ç–∏."""
    global SPEED
    if difficulty == 1:
        SPEED = 0.3
    elif difficulty == 2:
        SPEED = 0.2
    elif difficulty == 3:
        SPEED = 0.1

    snake = [(GRID_SIZE // 2, GRID_SIZE // 2)]
    food = (random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1))
    direction = "‚¨Ü"
    score = 0  # –û—á–∫–∏
    game_data[chat_id] = {"snake": snake, "food": food, "direction": direction, "score": score, "difficulty": difficulty}
    await update_game_message(chat_id)

async def update_game_message(chat_id):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—á–∫–æ–≤."""
    # –ü—Ä–æ–≤–µ—Ä—å, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ chat_id –≤ game_data
    if chat_id not in game_data:
        await bot.send_message(chat_id, "–ò–≥—Ä–∞ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        return

    data = game_data[chat_id]
    snake = data["snake"]
    food = data["food"]
    direction = data["direction"]
    score = data["score"]

    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ
    grid = [["‚¨ú" for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]
    for x, y in snake:
        grid[x][y] = "üü©"
    grid[food[0]][food[1]] = "üçé"

    field = "\n".join("".join(row) for row in grid)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚¨Ü", callback_data="move_‚¨Ü")],
        [InlineKeyboardButton(text="‚¨Ö", callback_data="move_‚¨Ö"),
         InlineKeyboardButton(text="‚û°", callback_data="move_‚û°")],
        [InlineKeyboardButton(text="‚¨á", callback_data="move_‚¨á")]
    ])
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ—á–∫–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å
    await bot.send_message(chat_id, f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {data['difficulty']}\n–û—á–∫–∏: {score}\n\n{field}", reply_markup=keyboard)

@router.message(Command("start"))
async def send_welcome(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–õ–µ–≥–∫–æ", callback_data="difficulty_1")],
        [InlineKeyboardButton(text="–°—Ä–µ–¥–Ω–µ", callback_data="difficulty_2")],
        [InlineKeyboardButton(text="–°–ª–æ–∂–Ω–æ", callback_data="difficulty_3")]
    ])
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∑–º–µ–π–∫–∞ –≤ Telegram. –í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:", reply_markup=markup)

@router.callback_query(lambda c: c.data.startswith("difficulty_"))
async def set_difficulty(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
    difficulty = int(callback_query.data.split("_")[1])
    chat_id = callback_query.message.chat.id
    await callback_query.answer()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–Ω–æ–ø–∫–µ
    await start_game(chat_id, difficulty)

@router.callback_query(lambda c: c.data.startswith("move_"))
async def move_snake(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–≤–∏–∂–µ–Ω–∏—è –∑–º–µ–π–∫–∏"""
    chat_id = callback_query.message.chat.id
    if chat_id not in game_data:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
        await callback_query.answer("–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å! –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    
    new_direction = callback_query.data.split("_")[1]
    data = game_data[chat_id]
    current_direction = data["direction"]

    # –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    if (new_direction == "‚¨Ü" and current_direction == "‚¨á") or \
       (new_direction == "‚¨á" and current_direction == "‚¨Ü") or \
       (new_direction == "‚¨Ö" and current_direction == "‚û°") or \
       (new_direction == "‚û°" and current_direction == "‚¨Ö"):
        return
    
    data["direction"] = new_direction
    await move_snake_logic(chat_id)
    await update_game_message(chat_id)

async def move_snake_logic(chat_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–º–µ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è"""
    data = game_data[chat_id]
    snake = data["snake"]
    direction = data["direction"]
    food = data["food"]
    score = data["score"]
    
    head_x, head_y = snake[-1]
    move_x, move_y = directions[direction]
    new_head = (head_x + move_x, head_y + move_y)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏ –∏–ª–∏ —Å–æ–±–æ–π
    if new_head in snake or not (0 <= new_head[0] < GRID_SIZE and 0 <= new_head[1] < GRID_SIZE):
        await bot.send_message(chat_id, "–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! /start –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
        del game_data[chat_id]
        return
    
    snake.append(new_head)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—ä–µ–ª–∞ –ª–∏ –∑–º–µ–π–∫–∞ –µ–¥—É
    if new_head == food:
        data["food"] = (random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1))  # –ù–æ–≤–∞—è –µ–¥–∞
        data["score"] += 1  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –æ—á–∫–∏
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ 5 –æ—á–∫–æ–≤
        if data["score"] % 5 == 0:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
            if data["difficulty"] < 3:  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å 3
                data["difficulty"] += 1
                await bot.send_message(chat_id, f"–°–ª–æ–∂–Ω–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∞ –¥–æ {data['difficulty']}!")
    
    else:
        snake.pop(0)  # –£–¥–∞–ª—è–µ–º —Ö–≤–æ—Å—Ç, –µ—Å–ª–∏ –Ω–µ —Å—ä–µ–¥–µ–Ω–∞ –µ–¥–∞


async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
