import asyncio
import logging
import random
from aiogram import Bot, Dispatcher, Router, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

TOKEN = ""  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)

GRID_SIZE = 10

directions = {
    "‚¨Ü": (-1, 0),
    "‚¨á": (1, 0),
    "‚¨Ö": (0, -1),
    "‚û°": (0, 1)
}

class SnakeGame:
    def __init__(self):
        self.snake = [(GRID_SIZE // 2, GRID_SIZE // 2)]
        self.food = (random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1))
        self.direction = "‚¨Ü"
    
    def move_snake(self):
        head_x, head_y = self.snake[-1]
        move_x, move_y = directions[self.direction]
        new_head = (head_x + move_x, head_y + move_y)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ —Å—Ç–µ–Ω–∞–º–∏
        if not (0 <= new_head[0] < GRID_SIZE and 0 <= new_head[1] < GRID_SIZE):
           return False
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å–æ –∑–º–µ–µ–π (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–º–µ—è –Ω–µ –µ—Å—Ç –µ–¥—É)
        if new_head in self.snake and new_head != self.food:
            return False
        
        self.snake.append(new_head)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—ä–µ–ª–∞ –ª–∏ –∑–º–µ–π–∫–∞ –µ–¥—É
        if new_head == self.food:
            self.food = (random.randint(0, GRID_SIZE - 1), random.randint(0, GRID_SIZE - 1))
        else:
             self.snake.pop(0)
        return True
        

    def get_grid_representation(self):
       grid = [["‚¨ú" for _ in range(GRID_SIZE)] for _ in range(GRID_SIZE)]
       for x, y in self.snake:
           grid[x][y] = "üü©"
       grid[self.food[0]][self.food[1]] = "üçé"
       return "\n".join("".join(row) for row in grid)
    
    def get_score(self):
        return len(self.snake) - 1

game_data = {}

async def update_game_message(chat_id):
    try:
        game = game_data[chat_id]
        field = game.get_grid_representation()
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨Ü", callback_data="move_‚¨Ü")],
            [InlineKeyboardButton(text="‚¨Ö", callback_data="move_‚¨Ö"),
             InlineKeyboardButton(text="‚û°", callback_data="move_‚û°")],
            [InlineKeyboardButton(text="‚¨á", callback_data="move_‚¨á")]
        ])
        await bot.send_message(chat_id, field, reply_markup=keyboard)
    except Exception as e:
        logging.error(f"Error updating game message: {e}")

greetings = ["–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —Å—Ç—Ä–∞–Ω–Ω–∏–∫!", "–ü—Ä–∏–≥–æ—Ç–æ–≤—å—Å—è –∫ –∏–≥—Ä–µ!", "–ó–º–µ–∏–Ω–∞—è –ª–∏—Ö–æ—Ä–∞–¥–∫–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è!", "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ø–∏–∫—Å–µ–ª—å–Ω–æ–π –∑–º–µ–∏!", "–ü—Ä–∏–≤–µ—Ç! –ò—Å–ø—ã—Ç–∞–π —Å–≤–æ—é –ª–æ–≤–∫–æ—Å—Ç—å."]

@router.message(Command("start"))
async def send_welcome(message: types.Message):
    name = message.from_user.first_name if message.from_user.first_name else "—Å—Ç—Ä–∞–Ω–Ω–∏–∫"
    await message.answer(f"{random.choice(greetings)}, {name}! üêç\n–ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –ø—Ä–æ–∫–æ—Ä–º–∏—Ç—å –∑–º–µ–π–∫—É –∏ –Ω–µ –≤—Ä–µ–∑–∞—Ç—å—Å—è –≤ —Å–∞–º—É —Å–µ–±—è! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
    game_data[message.chat.id] = SnakeGame()
    await update_game_message(message.chat.id)


@router.callback_query(lambda c: c.data.startswith("move_"))
async def move_snake(callback_query: types.CallbackQuery):
    chat_id = callback_query.message.chat.id
    if chat_id not in game_data:
        await bot.send_message(chat_id, "–ò–≥—Ä–∞ –µ—â—ë –Ω–µ –Ω–∞—á–∞—Ç–∞! –ù–∞—á–Ω–∏ –Ω–æ–≤—É—é –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start")
        return
    
    new_direction = callback_query.data.split("_")[1]
    game = game_data[chat_id]

    # –ó–∞–ø—Ä–µ—â–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
    if (new_direction == "‚¨Ü" and game.direction == "‚¨á") or \
        (new_direction == "‚¨á" and game.direction == "‚¨Ü") or \
        (new_direction == "‚¨Ö" and game.direction == "‚û°") or \
        (new_direction == "‚û°" and game.direction == "‚¨Ö"):
        await bot.send_message(chat_id, "–¢–∞–∫ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è! üö´ –ó–º–µ—è –Ω–µ –º–æ–∂–µ—Ç –¥–≤–∏–≥–∞—Ç—å—Å—è –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏.")
        return
    
    game.direction = new_direction
    if not game.move_snake():
      score = game.get_score()
      await bot.send_message(chat_id, f"–ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! ‚ò†Ô∏è –ó–º–µ—è –≤—Ä–µ–∑–∞–ª–∞—Å—å –≤ —Å–µ–±—è, –ª–∏–±–æ –≤ —Å—Ç–µ–Ω—É. –¢–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score}.\n/start –¥–ª—è –Ω–æ–≤–æ–π –∏–≥—Ä—ã.")
      del game_data[chat_id]
      return
      
    await update_game_message(chat_id)
    

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
